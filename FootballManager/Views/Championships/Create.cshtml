@model FootballManager.Models.Championship

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm("Create", "Championships", FormMethod.Post, new { enctype = "multipart/form-data" })) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Championship</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.LogoPath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.LogoPath, new { type = "file", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LogoPath, "", new { @class = "text-danger" })
            </div>
        </div>*@
        <div class="form-group">
            @Html.LabelFor(model => model.LogoPath, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.LogoPath, new { type = "file" })
                @Html.ValidationMessageFor(model => model.LogoPath)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FoudationDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FoudationDate, new { htmlAttributes = new { @class = "form-control datepicker", @type = "text"} })
                @Html.ValidationMessageFor(model => model.FoudationDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CountryID, "CountryID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CountryID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CountryID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EntityMngID, "EntityMngID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("EntityMngID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.EntityMngID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TeamPoints, "Teams", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*Html.DropDownList("Teams", null, htmlAttributes: new { @class = "form-control select2" })*@
                @*Html.HiddenFor(model => model.TeamPoints, new { id = "CUSTOMERID", @class = " input-block-level  bigdrop", placeholder = "Search for customer" })*@
                @Html.ValidationMessageFor(model => model.TeamPoints, "", new { @class = "text-danger" })
                @*@Html.HiddenFor(model => model.SelectedTeams, new { id = "teams", @class = " input-block-level", placeholder = "Search for team" })*@
                @Html.HiddenFor(model => model.SelectedTeams, new { id = "teams-hide", @class = "select2-offscreen", value = "" })
                @*<input type="hidden" name="SelectedTeams" class="select2-offscreen" id="teams-hide" style="width:100%" value="" />*@
                <input type="hidden" class="input-block-level" id="teams" name="teams" value="" placeholder="Search for team" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/Scripts/bootstrap-datepicker.js")
    @Scripts.Render("~/Scripts/select2.min.js")
    @Scripts.Render("~/Scripts/custom-functions.js")
    @Scripts.Render("~/bundles/jqueryval")

<script>
    $(document).ready(function () {
        //select2Dropdown('teams-hide', 'teams', 'Search for make(s)', 'SearchTeams', 'GetTeam', true);
        $("#teams-hide").select2({
            /*initSelection: function (element, callback) {
                var elementText = "ViewBag.currentItemName";
                callback({ "name": elementText });
            },*/
            initSelection: function (element, callback) {
                // the input tag has a value attribute preloaded that points to a preselected make's id
                // this function resolves that id attribute to an object that select2 can render
                // using its formatResult renderer - that way the make text is shown preselected
                var id = $('#teams').val();
                if (id !== null && id.length > 0) {
                    $.ajax("/Championships/SearchTeams/" + id, {
                        dataType: "json"
                    }).done(function (data) { callback(data); });
                }
            },

            placeholder: "Select an team",
            allowClear: true,
            style: "display: inline-block",
            //minimumInputLength: 2, //you can specify a min. query length to return results
            multiple: true,
            ajax:{
                cache: false,
                dataType: "json",
                type: "GET",
                url: "@Url.Action("SearchTeams", "Championships")",
            data: function (searchTerm) {
                return { id: searchTerm };
            },
            results: function (data) { 
                return {results: data}; 
            }
        },
        formatResult: function(contract) {
            var markup = "<table class='contract-result'><tr>";
            if (contract.name !== undefined) {
                markup += "<div class='contract-name'>" + contract.name + "</div>";
            }
            markup += "</td></tr></table>"
            return markup;
        },
        formatSelection: function(item){
            return item.name;
        },
        escapeMarkup: function (m) { return m; }
        });
    });
</script>
}
